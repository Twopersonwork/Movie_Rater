{"ast":null,"code":"var _jsxFileName = \"/home/prachi/workspace/Movie_Rater/src/components/MovieDetails.js\";\nimport React, { Component } from \"react\";\nimport { Card, Col, Row, Container, Form, Button } from \"react-bootstrap\";\nimport { FaStar } from \"react-icons/fa\";\nimport { withCookies } from \"react-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = stars => e => {\n      if (this.state.token) {\n        console.log(stars);\n        fetch(`http://127.0.0.1:8000/api/movies/${this.props.match.params.id}/rateMovie/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Token ${this.state.token}`\n          },\n          body: JSON.stringify({\n            stars: stars + 1\n          })\n        }).then(resp => resp.json()).then(this.setState({\n          nothing: !this.state.nothing\n        }), console.log(this.state.nothing)).catch(error => console.log(error));\n      } // e.preventDefault();\n      // this.setState({\n      //   stars: \"\",\n      // });\n      // console.log(\"stars\", this.state.stars);\n      // console.log(\"token\", this.state.token);\n\n    };\n\n    this.onhighlight = high => () => {\n      if (high !== -1) {\n        this.setState({\n          stars: high\n        });\n      } else {\n        this.setState({\n          stars: 0\n        });\n      }\n\n      this.setState({\n        colored: high\n      });\n    };\n\n    this.state = {\n      movieDetail: {},\n      token: this.props.cookies.get(\"auth-token\"),\n      colored: -1,\n      nothing: false\n    };\n  }\n\n  /*\n  componentDidMount() will run after the render method and which ever movie user selected ,\n  fetch it from the server and store it in movieDetails.\n  */\n  componentDidMount() {\n    console.log(\"hello\");\n    fetch(`http://127.0.0.1:8000/api/movies/${this.props.match.params.id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\" // Authorization: \"Token 6622e38254ac5510944a93a53ae3e5d9f6bf5c17\",\n\n      }\n    }).then(resp => resp.json()).then(res => this.setState({\n      movieDetail: res\n    })).catch(error => console.log(error));\n  }\n\n  render() {\n    console.log(this.state.stars);\n    const movie = this.state.movieDetail;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt-2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              sm: 8,\n              xl: true,\n              lg: true,\n              md: true,\n              children: /*#__PURE__*/_jsxDEV(Card.Img, {\n                variant: \"top\",\n                src: movie.Poster\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 4,\n              xl: true,\n              lg: true,\n              md: true,\n              children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Actors:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Actors\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Awards:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Awards\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Box_office:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Box_office\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Country:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Country\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Director:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Director\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Genre:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Genre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Language:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Language\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Released:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Released\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Runtime:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Runtime\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Type:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Writer:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: movie.Writer\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"imdbVotes:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-muted forText\",\n                  children: movie.imdbVotes\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Ratings:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-muted forText\",\n                  children: movie.no_of_ratings\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Avg Ratings:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-muted forText\",\n                  children: movie.avg_rating\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [\"Rate this:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"mb-2 text-muted forText\",\n                  children: [...Array(5)].map((e, i) => {\n                    return /*#__PURE__*/_jsxDEV(FaStar, {\n                      size: 32,\n                      style: this.state.colored > i - 1 ? {\n                        color: \"orange\"\n                      } : {\n                        color: \"\"\n                      },\n                      onMouseOver: this.onhighlight(i),\n                      onMouseLeave: this.onhighlight(-1),\n                      onClick: this.onSubmit(i)\n                    }, i, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 184,\n                      columnNumber: 25\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Link, {\n                href: `https://www.imdb.com/title/${movie.imdbID}/`,\n                children: \"More details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n} // for using cookies we have to export component like this.\n\n\nexport default _c = withCookies(MovieDetails);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/prachi/workspace/Movie_Rater/src/components/MovieDetails.js"],"names":["React","Component","Card","Col","Row","Container","Form","Button","FaStar","withCookies","MovieDetails","constructor","props","onSubmit","stars","e","state","token","console","log","fetch","match","params","id","method","headers","Authorization","body","JSON","stringify","then","resp","json","setState","nothing","catch","error","onhighlight","high","colored","movieDetail","cookies","get","componentDidMount","res","render","movie","Poster","Title","Actors","Awards","Box_office","Country","Director","Genre","Language","Released","Runtime","Type","Writer","imdbVotes","no_of_ratings","avg_rating","Array","map","i","color","imdbID"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Col, Row, Container, Form, Button } from \"react-bootstrap\";\nimport { FaStar } from \"react-icons/fa\";\nimport { withCookies } from \"react-cookie\";\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movieDetail: {},\n      token: this.props.cookies.get(\"auth-token\"),\n      colored: -1,\n      nothing: false,\n    };\n  }\n\n  onSubmit = (stars) => (e) => {\n    if (this.state.token) {\n      console.log(stars);\n\n      fetch(\n        `http://127.0.0.1:8000/api/movies/${this.props.match.params.id}/rateMovie/`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Token ${this.state.token}`,\n          },\n\n          body: JSON.stringify({\n            stars: stars + 1,\n          }),\n        }\n      )\n        .then((resp) => resp.json())\n        .then(\n          this.setState({ nothing: !this.state.nothing }),\n          console.log(this.state.nothing)\n        )\n        .catch((error) => console.log(error));\n    }\n\n    // e.preventDefault();\n    // this.setState({\n    //   stars: \"\",\n    // });\n    // console.log(\"stars\", this.state.stars);\n    // console.log(\"token\", this.state.token);\n  };\n\n  /*\ncomponentDidMount() will run after the render method and which ever movie user selected ,\nfetch it from the server and store it in movieDetails.\n*/\n  componentDidMount() {\n    console.log(\"hello\");\n    fetch(`http://127.0.0.1:8000/api/movies/${this.props.match.params.id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Authorization: \"Token 6622e38254ac5510944a93a53ae3e5d9f6bf5c17\",\n      },\n    })\n      .then((resp) => resp.json())\n      .then((res) => this.setState({ movieDetail: res }))\n      .catch((error) => console.log(error));\n  }\n\n  onhighlight = (high) => () => {\n    if (high !== -1) {\n      this.setState({\n        stars: high,\n      });\n    } else {\n      this.setState({\n        stars: 0,\n      });\n    }\n    this.setState({\n      colored: high,\n    });\n  };\n\n  render() {\n    console.log(this.state.stars);\n    const movie = this.state.movieDetail;\n    return (\n      <Container className=\"mt-2\">\n        {/* Here we create card for store the movie poster on left side and all the movie details on\n        the right side of the card. */}\n        <Card>\n          <Card.Body>\n            <Row>\n              <Col sm={8} xl lg md>\n                <Card.Img variant=\"top\" src={movie.Poster} />\n              </Col>\n              <Col sm={4} xl lg md>\n                <Card.Text>\n                  Title:\n                  <span className=\"mb-2 text-muted forText\">{movie.Title}</span>\n                </Card.Text>\n                <Card.Text>\n                  Actors:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Actors}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Awards:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Awards}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Box_office:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Box_office}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Country:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Country}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Director:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Director}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Genre:\n                  <span className=\"mb-2 text-muted forText\">{movie.Genre}</span>\n                </Card.Text>\n                <Card.Text>\n                  Language:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Language}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Released:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Released}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Runtime:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Runtime}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Type:\n                  <span className=\"mb-2 text-muted forText\">{movie.Type}</span>\n                </Card.Text>\n                <Card.Text>\n                  Writer:\n                  <span className=\"mb-2 text-muted forText\">\n                    {movie.Writer}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  imdbVotes:\n                  <span className=\"text-muted forText\">{movie.imdbVotes}</span>\n                </Card.Text>\n                <Card.Text>\n                  Ratings:\n                  <span className=\"text-muted forText\">\n                    {movie.no_of_ratings}\n                  </span>\n                </Card.Text>\n                <Card.Text>\n                  Avg Ratings:\n                  <span className=\"text-muted forText\">{movie.avg_rating}</span>\n                </Card.Text>\n                <Card.Text>\n                  Rate this:\n                  <span className=\"mb-2 text-muted forText\">\n                    {[...Array(5)].map((e, i) => {\n                      return (\n                        <FaStar\n                          size={32}\n                          key={i}\n                          style={\n                            this.state.colored > i - 1\n                              ? { color: \"orange\" }\n                              : { color: \"\" }\n                          }\n                          onMouseOver={this.onhighlight(i)}\n                          onMouseLeave={this.onhighlight(-1)}\n                          onClick={this.onSubmit(i)}\n                        />\n                      );\n                    })}\n                  </span>\n                </Card.Text>\n                <Card.Link href={`https://www.imdb.com/title/${movie.imdbID}/`}>\n                  More details\n                </Card.Link>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    );\n  }\n}\n// for using cookies we have to export component like this.\nexport default withCookies(MovieDetails);\n"]},"metadata":{},"sourceType":"module"}